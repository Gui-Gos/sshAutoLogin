#!/bin/bash
# Author   :    GuGus
# Email    :    guillaume@guigos.com
# Github   :    https://github.com/o-GuGus/sshAutoLogin

# Définition des couleurs
readonly Red="\e[0;31m"
readonly Green="\e[0;32m"
readonly Yellow="\e[0;33m"
readonly Blue="\e[0;34m"
readonly Cyan="\e[0;36m"
readonly ResetColor="\e[0m"

# Configuration des dossiers
readonly Config_Dir=~/.ssha
readonly DeletedFolder=~/.ssha/.deleted
readonly Config_Pass=~/.ssha/.data

# Initialisation des tableaux
declare -a server_list
declare -a server_list_ordered

# Fonction pour créer un fichier de configuration
create_config_file() {
    local file="$1"
    local content="$2"
    printf "%s" "$content" > "$file"
    chmod 700 "$file"
    chown "$(whoami)" "$file"
}

# Chargement de la liste des serveurs
load_server_list() {
    if [[ -d $Config_Dir ]]; then
        for config_file in "$Config_Dir"/*.{ini,conf}; do
            if [[ -f $config_file ]]; then
                while IFS= read -r line; do
                    eval "$line"
                done < "$config_file"
                server_list+=("$Index $Name $Host $Port $User $PasswordOrKey")
            fi
        done
    else
        printf "${Red}Le dossier de travail '$Config_Dir' n'existe pas${ResetColor}\n"
        printf "${Green}Création du dossier '$Config_Dir' et configuration des permissions${ResetColor}\n"
        mkdir -p "$Config_Dir"
        chmod -R 700 "$Config_Dir"
        chown -R "$(whoami)" "$Config_Dir"
        create_config_file "$Config_Dir/0_localhost.ini" "Index=0\nName=localhost\nHost=127.0.0.1\nPort=22\nUser=root\nPasswordOrKey=password\n"
        ssha -h
    fi
}

# Fonction pour réorganiser la liste des serveurs
reorder_server_list() {
    local concatened=""
    for ((i=0; i<${#server_list[@]}; i++)); do
        IFS=" " read -ra data <<< "${server_list[$i]}"
        concatened+="${data[0]} ${data[1]} ${data[2]} ${data[3]} ${data[4]} ${data[5]}\n"
    done
    local clean
    clean=$(printf "%s" "$concatened" | sed -e 's/^[ \t]*//' -e '/^$/d' | sort -V)
    while IFS= read -r line; do
        server_list_ordered+=("$line")
    done <<< "$clean"
}

# Fonction pour afficher la bannière
banner() {
    local message="$1"
    local width=$((${#message} + 4))
    printf "+%${width}s+\n" | tr " " "-"
    printf "| %s |\n" "$message"
    printf "+%${width}s+\n" | tr " " "-"
}

# Fonction pour lister les serveurs
list_servers() {
    printf "| %-5s | %-15s | %-15s | %-5s | %-15s | %-15s |\n" "Index" "Description" "Host/IP" "Port" "Username" "Pass|SecKFile"
    printf "|%s|%s|%s|%s|%s|%s|\n" "$(printf '%.7s' ========)" "$(printf '%.17s' ==================)" "$(printf '%.17s' ==================)" "$(printf '%.7s' ========)" "$(printf '%.17s' ==================)" "$(printf '%.17s' ==================)"
    for ((i=0; i<${#server_list_ordered[@]}; i++)); do
        IFS=' ' read -ra server <<< "${server_list_ordered[$i]}"
        printf "| ${Red}%-5s${ResetColor} | ${Green}%-15s${ResetColor} | %-15s | %-5s | %-15s | %-15s |\n" "$i" "${server[1]}" "${server[2]}" "${server[3]}" "${server[4]}" "${server[5]}"
    done
    printf "|%s|%s|%s|%s|%s|%s|\n" "$(printf '%.7s' ========)" "$(printf '%.17s' ==================)" "$(printf '%.17s' ==================)" "$(printf '%.7s' ========)" "$(printf '%.17s' ==================)" "$(printf '%.17s' ==================)"
}

# Fonction pour se connecter à un serveur
login_server() {
    local server_index="$1"
    IFS=' ' read -ra server <<< "${server_list_ordered[$server_index]}"
    local password
    password=$(decrypt_password "${server[5]}")
    
    banner "${Cyan}$USER${ResetColor} ${Green}se connecte${ResetColor} au serveur ${Yellow}【${server[1]}】${ResetColor}"
    
    expect -c "
        spawn ssh -p ${server[3]} ${server[4]}@${server[2]}
        expect {
            \"*assword\" { send \"$password\r\"; exp_continue }
            \"*passphrase\" { send \"$password\r\"; exp_continue }
            \"yes/no\" { send \"yes\r\"; exp_continue }
            \"Last*\" { send_user \"\nConnexion réussie à 【${server[1]}】\n\" }
        }
        interact
    "
    
    banner "${Cyan}$USER${ResetColor} ${Red}s'est déconnecté${ResetColor} du serveur ${Yellow}【${server[1]}】${ResetColor}"
}

# Fonction pour créer un nouveau serveur
create_server() {
    printf "\n${Cyan}Création d'un nouveau serveur :${ResetColor}\n"
    read -rp "Description du serveur : " name
    read -rp "Nom d'hôte ou IP : " host
    read -rp "Port : " port
    read -rp "Nom d'utilisateur : " user
    read -rsp "Mot de passe ou chemin de la clé : " pass
    printf "\n"
    
    local encrypted_pass
    encrypted_pass=$(encrypt_password "$name" "$pass")
    
    printf "\n${Cyan}Vérifiez les informations suivantes :${ResetColor}\n"
    printf "${Yellow}Nom du serveur :${ResetColor} %s\n" "$name"
    printf "${Yellow}Hôte ou IP :${ResetColor} %s\n" "$host"
    printf "${Yellow}Port :${ResetColor} %s\n" "$port"
    printf "${Yellow}Nom d'utilisateur :${ResetColor} %s\n" "$user"
    printf "${Yellow}Mot de passe/Clé :${ResetColor} [caché]\n"
    
    read -rp "Les informations sont-elles correctes ? (O/N) " confirm
    if [[ $confirm =~ ^[oOyY] ]]; then
        local index=${#server_list[@]}
        create_config_file "$Config_Dir/${index}_${name}.conf" "Index=$index\nName=$name\nHost=$host\nPort=$port\nUser=$user\nPasswordOrKey=$encrypted_pass\n"
        printf "${Green}Le serveur '$name' a été enregistré avec succès.${ResetColor}\n"
        load_server_list
        list_servers
    else
        printf "${Yellow}Création du serveur annulée.${ResetColor}\n"
    fi
}

# Fonction pour supprimer un serveur
delete_server() {
    list_servers
    read -rp "Quel serveur voulez-vous supprimer ? (Entrez le numéro) : " server_number
    
    if ((server_number >= 0 && server_number < ${#server_list_ordered[@]})); then
        IFS=' ' read -ra server <<< "${server_list_ordered[$server_number]}"
        read -rp "Voulez-vous vraiment supprimer le serveur ${server[1]} ? (O/N) : " confirm
        if [[ $confirm =~ ^[oOyY] ]]; then
            rm -f "$Config_Dir/${server_number}_${server[1]}".*
            mkdir -p "$DeletedFolder"
            printf "${Green}Le serveur ${server[1]} a été supprimé.${ResetColor}\n"
            load_server_list
            reorder_server_list
        else
            printf "${Yellow}Suppression annulée.${ResetColor}\n"
        fi
    else
        printf "${Red}Numéro de serveur invalide.${ResetColor}\n"
    fi
}

# Fonction pour chiffrer le mot de passe
encrypt_password() {
    local machine_name="$1"
    local password="$2"
    local salt
    salt=$(openssl rand -hex 8)
    local key
    key=$(openssl rand -hex 12)
    local encrypted
    encrypted=$(echo -n "$password" | openssl aes-256-ctr -md sha512 -a -A -S "$salt" -k "$key" 2>/dev/null)
    local base64_machine
    base64_machine=$(echo -n "$machine_name" | base64)
    
    mkdir -p "$Config_Pass"
    chmod 700 "$Config_Pass"
    
    create_config_file "$Config_Pass/.$base64_machine" "machine=$base64_machine\nencrypted=$encrypted\nsalt=$salt\nkey=$key\n"
    
    echo "$base64_machine"
}

# Fonction pour déchiffrer le mot de passe
decrypt_password() {
    local encoded_machine_name="$1"
    local config_file="$Config_Pass/.$encoded_machine_name"
    
    if [[ -f $config_file ]]; then
        local encrypted salt key
        . "$config_file"
        echo -n "$encrypted" | openssl aes-256-ctr -md sha512 -d -a -A -S "$salt" -k "$key" 2>/dev/null
    else
        printf "${Red}Fichier de configuration non trouvé pour $encoded_machine_name${ResetColor}\n" >&2
        return 1
    fi
}

# Fonction principale
main() {
    load_server_list
    reorder_server_list

    case "$1" in
        -h|--help)
            printf "Usage: ssha [-h] [-l] [-c] [-d] [-s <numéro de serveur>]\n"
            printf "  -h, --help     Affiche cette aide\n"
            printf "  -l, --list     Liste les serveurs\n"
            printf "  -c, --create   Crée un nouveau serveur\n"
            printf "  -d, --delete   Supprime un serveur\n"
            printf "  -s <numéro>    Se connecte au serveur spécifié\n"
            ;;
        -l|--list)
            list_servers
            ;;
        -c|--create)
            create_server
            ;;
        -d|--delete)
            delete_server
            ;;
        -s)
            if [[ -n $2 && $2 =~ ^[0-9]+$ ]]; then
                login_server "$2"
            else
                printf "${Red}Veuillez spécifier un numéro de serveur valide.${ResetColor}\n"
            fi
            ;;
        *)
            printf "${Red}Option non reconnue. Utilisez -h pour l'aide.${ResetColor}\n"
            ;;
    esac
}

main "$@"
