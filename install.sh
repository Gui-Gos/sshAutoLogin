#!/bin/bash
# Authors   :    AlicFeng & GuGus
# Emails    :    a@samego.com / guillaume@guigos.com
# Githubs   :    https://github.com/alicfeng/sshAutoLogin / https://github.com/o-GuGus/sshAutoLogin

# Terminal Colors
Red="\e[0;31m"
Green="\e[0;32m"
Yellow="\e[0;33m"
Blue="\e[0;34m"
ResetColor="\e[0m"

# Banner Function
function Banner {
    printf "${Blue}
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
                                                               
‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
${ResetColor}\n"
}

# Detect OS Function
function DetectOS {
    printf "üîç ${Blue}D√©tection du syst√®me d'exploitation...${ResetColor}\n"
    if [[ "$(uname -s)" == "Darwin" ]]; then
        OS="MacOS"
    elif [[ -f /etc/debian_version ]]; then
        OS="Debian"
    elif [[ -f /etc/redhat-release ]]; then
        OS="RedHat"
    else
        OS="Unknown"
    fi
    printf "‚úÖ ${Green}Syst√®me d'exploitation d√©tect√© : $OS${ResetColor}\n"
}

# Check Root or Sudo Function
function CheckRootOrSudo {
    printf "üîê ${Blue}V√©rification des privil√®ges...${ResetColor}\n"
    if [[ $EUID -ne 0 ]]; then
        if ! sudo -v &> /dev/null; then
            printf "‚ùå ${Red}Ce script doit √™tre ex√©cut√© avec des privil√®ges sudo. Veuillez l'ex√©cuter en tant que root ou utiliser sudo.${ResetColor}\n"
            exit 1
        fi
    fi
    printf "‚úÖ ${Green}Privil√®ges suffisants d√©tect√©s.${ResetColor}\n"
}

# Configure Directory Function
function ConfigureDirectory {
    printf "üìÅ ${Blue}Configuration du r√©pertoire...${ResetColor}\n"
    Config_Dir=~/.ssha
    if [[ ! -d $Config_Dir ]]; then
        printf "${Yellow}Cr√©ation du r√©pertoire $Config_Dir${ResetColor}\n"
        mkdir -p $Config_Dir
    fi
    chmod 700 $Config_Dir
    chown $(whoami) $Config_Dir
    printf "‚úÖ ${Green}R√©pertoire configur√© avec succ√®s.${ResetColor}\n"
}

# Install Dependencies Function
function InstallDependencies {
    printf "üîß ${Blue}V√©rification des d√©pendances...${ResetColor}\n"
    case $OS in
        "Debian"|"RedHat")
            missing_deps=()
            for dep in bash openssl expect ssh sed; do
                if ! command -v $dep &> /dev/null; then
                    missing_deps+=($dep)
                fi
            done
            
            if [ ${#missing_deps[@]} -eq 0 ]; then
                printf "‚úÖ ${Green}Toutes les d√©pendances n√©cessaires sont d√©j√† install√©es.${ResetColor}\n"
            else
                printf "üì¶ ${Yellow}Installation des d√©pendances manquantes : ${missing_deps[*]}${ResetColor}\n"
                if [ "$OS" = "Debian" ]; then
                    sudo apt-get update
                    sudo apt-get install -y ${missing_deps[@]} openssh-client
                else
                    sudo yum update
                    sudo yum install -y ${missing_deps[@]} openssh-clients
                fi
                printf "‚úÖ ${Green}D√©pendances install√©es avec succ√®s.${ResetColor}\n"
            fi
            ;;
        "MacOS")
            if ! command -v expect &> /dev/null || ! command -v openssl &> /dev/null; then
                printf "‚ö†Ô∏è ${Yellow}Expect ou OpenSSL non trouv√©. V√©rifiez votre installation macOS.${ResetColor}\n"
                printf "${Yellow}Si n√©cessaire, installez les outils de d√©veloppement en ex√©cutant :${ResetColor}\n"
                printf "${Green}xcode-select --install${ResetColor}\n"
                exit 1
            else
                printf "‚úÖ ${Green}Toutes les d√©pendances n√©cessaires sont d√©j√† install√©es sur macOS.${ResetColor}\n"
            fi
            ;;
        *)
            printf "‚ùå ${Red}Syst√®me d'exploitation non support√©. Veuillez installer les d√©pendances manuellement.${ResetColor}\n"
            exit 1
            ;;
    esac
}

# Install SSHA Binary Function
function InstallSSHABinary {
    printf "üì• ${Blue}Installation du binaire SSHA...${ResetColor}\n"
    Bin="/usr/local/bin/ssha"
    if [[ -f $Bin ]]; then
        printf "üîÑ ${Yellow}Suppression de l'ancienne version de SSHA${ResetColor}\n"
        sudo rm $Bin
    fi
    sudo curl -o $Bin https://raw.githubusercontent.com/o-GuGus/sshAutoLogin/master/ssha
    sudo chmod a+x $Bin
    printf "‚úÖ ${Green}SSHA install√© avec succ√®s !${ResetColor}\n"
    $Bin -h
}

# Main Execution
Banner
DetectOS
CheckRootOrSudo
ConfigureDirectory
InstallDependencies
InstallSSHABinary

printf "üéâ ${Green}Installation termin√©e. Vous pouvez maintenant utiliser la commande 'ssha'.${ResetColor}\n"
